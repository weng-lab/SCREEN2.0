/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n": types.RnaSeqQueryDocument,
    "\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n": types.Biosamples_1Document,
    "\nquery cCREQuery($accession_prefix: [String!], $limit: Int, $assembly: String!) {\n    cCREQuery(accession_prefix: $accession_prefix, assembly: $assembly, limit: $limit) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n}\n": types.CCreQueryDocument,
    "\nquery bedIntersectCCRE_1 ($user_ccres: [cCRE]!, $assembly: String!, $max_ouput_length: Int) {\n  intersection (\n    userCcres: $user_ccres,\n    assembly: $assembly,\n    maxOutputLength: $max_ouput_length\n  )\n}\n": types.BedIntersectCcre_1Document,
    "\n  query getGeneLocation($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": types.GetGeneLocationDocument,
    "\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n ": types.GeneexpressionDocument,
    "\n query geneAutocomplete($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n   }\n } ": types.GeneAutocompleteDocument,
    "\n  query geneOrthologQuery($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n": types.GeneOrthologQueryDocument,
    "\n  query getAllGWASStudies {\n    getAllGwasStudies {\n      study\n      totalldblocks    \n      author\n      pubmedid\n      studyname\n      \n    }\n  }\n": types.GetAllGwasStudiesDocument,
    "\n  query getSNPsforgivengwasStudy($study: [String!]!){\n    getSNPsforGWASStudies(study:$study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n    }\n  }": types.GetSnPsforgivengwasStudyDocument,
    "\n  query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!) {\n    intersection (\n      userCcres: $inp,\n      assembly: $assembly\n    )\n  }\n": types.BedIntersectCcreDocument,
    "\n  query ccreSearchQuery_2(\n    $assembly: String!\n    $celltype: String\n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $celltype\n      nearbygeneslimit: 1\n    ) {\n      chrom\n      start\n      len\n      pct\n      nearestgenes {\n        gene\n        distance\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        dnase_zscore\n        ctcf_zscore\n        atac_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n      }\n      info {\n        accession\n      }\n    }\n  }\n": types.CcreSearchQuery_2Document,
    "\n  query getGWASCTEnrichmentQuery($study: String!) {\n    getGWASCtEnrichmentQuery(study: $study) {\n      celltype\n      accession\n      fc\n      fdr\n      pvalue\n    }\n  }\n": types.GetGwasctEnrichmentQueryDocument,
    "\n  query getDisplayNames($assembly: String!, $samples: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, name: $samples) {\n      biosamples {\n        name\n        displayname\n        ontology\n      }    \n    }\n  }\n": types.GetDisplayNamesDocument,
    "\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n": types.Q_4Document,
    "\n  query s_3($chromosome: String, $start: Int, $end: Int, $assembly: String!) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n": types.S_3Document,
    "\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n": types.EntexQueryDocument,
    "\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}": types.EntexActiveAnnotationsQueryDocument,
    "\nquery cCRETF($accession: String!, $assembly: String!) {\ngetcCRETFQuery(accession: $accession, assembly: $assembly) {\n    celltype\n    tf\n  }\n}\n": types.CCretfDocument,
    "\n  query topTissues($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        sampleType\n        displayname\n        cCREZScores(accession: $accession) {\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n": types.TopTissuesDocument,
    "\n  query linkedGenes(\n    $assembly: String!\n    $accessions: [String]!\n    $methods: [String]\n    $celltypes: [String]\n  ) {\n    linkedGenes: linkedGenesQuery(\n      assembly: $assembly\n      accession: $accessions\n      method: $methods\n      celltype: $celltypes\n    ) {\n      p_val\n      gene\n      geneid\n      genetype\n      method\n      accession\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      score\n      variantid\n      source\n      slope\n      tissue\n      displayname\n    }\n  }\n": types.LinkedGenesDocument,
    "\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n": types.Mpra_FccDocument,
    "\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": types.CapraFccSoloQueryDocument,
    "\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": types.CapraFccDoubleQueryDocument,
    "\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n": types.RdhsDocument,
    "\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n": types.FunctionalCharacterizationQueryDocument,
    "\n  query geneName($assembly: String!, $name_prefix: [String!], $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, version: $version) {\n      name\n      id\n    }\n  }\n": types.GeneNameDocument,
    "\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n": types.OrthologTabDocument,
    "\n  query nearbyGenomicFeatures($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $a: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n\n    snpQuery(coordinates: $coordinates, assembly: $a, common: true) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": types.NearbyGenomicFeaturesDocument,
    "\n  query nearbyGenomicFeaturesNoSNPs($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n  }\n": types.NearbyGenomicFeaturesNoSnPsDocument,
    "\n  query tfpeaks_1($assembly: String, $range: [ChromosomeRangeInput]!, $target: String) {\n    peaks(assembly: $assembly, range: $range, target: $target) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n          files(types: \"replicated_peaks\") {\n            accession\n          }\n        }\n      }\n    }\n  }\n": types.Tfpeaks_1Document,
    "\n  query tfpeaks_2($assembly: String, $range: [ChromosomeRangeInput]!, $species: String) {\n    peaks(assembly: $assembly, range: $range) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n        }\n      }\n    }\n    peakDataset(species: $species) {\n      partitionByTarget {\n        target {\n          name\n        }\n        counts {\n          total\n        }\n      }\n    }\n  }\n": types.Tfpeaks_2Document,
    "\n  query nearbyAndLinkedGenes(\n    $accessions: [String!]!\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      displayname\n    }\n  }\n": types.NearbyAndLinkedGenesDocument,
    "\n  query geneQuery($assembly: String!, $name_prefix: [String!], $limit: Int, $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, limit: $limit, version: $version) {\n      name\n      id\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  } \n    ": types.GeneQueryDocument,
    "\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}": types.TssRampageDocument,
    "\n  query cCRE_1($assembly: String!, $accession: [String!], $experiments: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n": types.CCre_1Document,
    "\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n": types.CCre_2Document,
    "\n  query cytobands($assembly: String!, $chromosome: String) {\n    cytoband(assembly: $assembly, chromosome: $chromosome) {\n      stain\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": types.CytobandsDocument,
    "\n  query biosamples_2 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n  }\n": types.Biosamples_2Document,
    "\n  query s_2($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n": types.S_2Document,
    "\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n": types.BigRequestsDocument,
    "\n  query q_1($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n      }\n    }\n  }\n": types.Q_1Document,
    "\n  query s_1($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n": types.S_1Document,
    "\n query geneTSS($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n     strand\n     transcripts {\n      name\n      coordinates {\n        start\n        end\n      }      \n    }\n   }\n } ": types.GeneTssDocument,
    "\n  query getlistofLinkedGenesCelltypes {\n    linkedGenesCelltypes: getLinkedGenesCelltypes {\n      celltype\n      displayname\n      method\n    }\n  }\n": types.GetlistofLinkedGenesCelltypesDocument,
    "\n  query getGeneLocation1($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": types.GetGeneLocation1Document,
    "\n  query snpAutocompleteQuery($snpid: String!, $assembly: String!) {\n      snpAutocompleteQuery(snpid: $snpid, assembly: $assembly) {\n          id\n          coordinates {\n              chromosome\n              start\n              end\n          }\n      }\n  }  \n": types.SnpAutocompleteQueryDocument,
    "\n  query getAcccessionCoords($accession: [String!], $assembly: String!) {\n    cCREQuery(accession: $accession, assembly: $assembly) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n  }\n": types.GetAcccessionCoordsDocument,
    "\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n": types.CcreSearchQuery_1Document,
    "\n  query biosamples_3 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n": types.Biosamples_3Document,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n"): (typeof documents)["\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"): (typeof documents)["\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery cCREQuery($accession_prefix: [String!], $limit: Int, $assembly: String!) {\n    cCREQuery(accession_prefix: $accession_prefix, assembly: $assembly, limit: $limit) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n}\n"): (typeof documents)["\nquery cCREQuery($accession_prefix: [String!], $limit: Int, $assembly: String!) {\n    cCREQuery(accession_prefix: $accession_prefix, assembly: $assembly, limit: $limit) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery bedIntersectCCRE_1 ($user_ccres: [cCRE]!, $assembly: String!, $max_ouput_length: Int) {\n  intersection (\n    userCcres: $user_ccres,\n    assembly: $assembly,\n    maxOutputLength: $max_ouput_length\n  )\n}\n"): (typeof documents)["\nquery bedIntersectCCRE_1 ($user_ccres: [cCRE]!, $assembly: String!, $max_ouput_length: Int) {\n  intersection (\n    userCcres: $user_ccres,\n    assembly: $assembly,\n    maxOutputLength: $max_ouput_length\n  )\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGeneLocation($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGeneLocation($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n "): (typeof documents)["\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query geneAutocomplete($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n   }\n } "): (typeof documents)["\n query geneAutocomplete($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n   }\n } "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneOrthologQuery($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n"): (typeof documents)["\n  query geneOrthologQuery($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAllGWASStudies {\n    getAllGwasStudies {\n      study\n      totalldblocks    \n      author\n      pubmedid\n      studyname\n      \n    }\n  }\n"): (typeof documents)["\n  query getAllGWASStudies {\n    getAllGwasStudies {\n      study\n      totalldblocks    \n      author\n      pubmedid\n      studyname\n      \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getSNPsforgivengwasStudy($study: [String!]!){\n    getSNPsforGWASStudies(study:$study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n    }\n  }"): (typeof documents)["\n  query getSNPsforgivengwasStudy($study: [String!]!){\n    getSNPsforGWASStudies(study:$study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!) {\n    intersection (\n      userCcres: $inp,\n      assembly: $assembly\n    )\n  }\n"): (typeof documents)["\n  query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!) {\n    intersection (\n      userCcres: $inp,\n      assembly: $assembly\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ccreSearchQuery_2(\n    $assembly: String!\n    $celltype: String\n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $celltype\n      nearbygeneslimit: 1\n    ) {\n      chrom\n      start\n      len\n      pct\n      nearestgenes {\n        gene\n        distance\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        dnase_zscore\n        ctcf_zscore\n        atac_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n      }\n      info {\n        accession\n      }\n    }\n  }\n"): (typeof documents)["\n  query ccreSearchQuery_2(\n    $assembly: String!\n    $celltype: String\n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $celltype\n      nearbygeneslimit: 1\n    ) {\n      chrom\n      start\n      len\n      pct\n      nearestgenes {\n        gene\n        distance\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        dnase_zscore\n        ctcf_zscore\n        atac_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n      }\n      info {\n        accession\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGWASCTEnrichmentQuery($study: String!) {\n    getGWASCtEnrichmentQuery(study: $study) {\n      celltype\n      accession\n      fc\n      fdr\n      pvalue\n    }\n  }\n"): (typeof documents)["\n  query getGWASCTEnrichmentQuery($study: String!) {\n    getGWASCtEnrichmentQuery(study: $study) {\n      celltype\n      accession\n      fc\n      fdr\n      pvalue\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getDisplayNames($assembly: String!, $samples: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, name: $samples) {\n      biosamples {\n        name\n        displayname\n        ontology\n      }    \n    }\n  }\n"): (typeof documents)["\n  query getDisplayNames($assembly: String!, $samples: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, name: $samples) {\n      biosamples {\n        name\n        displayname\n        ontology\n      }    \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n"): (typeof documents)["\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query s_3($chromosome: String, $start: Int, $end: Int, $assembly: String!) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query s_3($chromosome: String, $start: Int, $end: Int, $assembly: String!) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n"): (typeof documents)["\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}"): (typeof documents)["\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery cCRETF($accession: String!, $assembly: String!) {\ngetcCRETFQuery(accession: $accession, assembly: $assembly) {\n    celltype\n    tf\n  }\n}\n"): (typeof documents)["\nquery cCRETF($accession: String!, $assembly: String!) {\ngetcCRETFQuery(accession: $accession, assembly: $assembly) {\n    celltype\n    tf\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query topTissues($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        sampleType\n        displayname\n        cCREZScores(accession: $accession) {\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n"): (typeof documents)["\n  query topTissues($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        sampleType\n        displayname\n        cCREZScores(accession: $accession) {\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query linkedGenes(\n    $assembly: String!\n    $accessions: [String]!\n    $methods: [String]\n    $celltypes: [String]\n  ) {\n    linkedGenes: linkedGenesQuery(\n      assembly: $assembly\n      accession: $accessions\n      method: $methods\n      celltype: $celltypes\n    ) {\n      p_val\n      gene\n      geneid\n      genetype\n      method\n      accession\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      score\n      variantid\n      source\n      slope\n      tissue\n      displayname\n    }\n  }\n"): (typeof documents)["\n  query linkedGenes(\n    $assembly: String!\n    $accessions: [String]!\n    $methods: [String]\n    $celltypes: [String]\n  ) {\n    linkedGenes: linkedGenesQuery(\n      assembly: $assembly\n      accession: $accessions\n      method: $methods\n      celltype: $celltypes\n    ) {\n      p_val\n      gene\n      geneid\n      genetype\n      method\n      accession\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      score\n      variantid\n      source\n      slope\n      tissue\n      displayname\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n"): (typeof documents)["\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"): (typeof documents)["\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"): (typeof documents)["\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n"): (typeof documents)["\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n"): (typeof documents)["\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneName($assembly: String!, $name_prefix: [String!], $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, version: $version) {\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  query geneName($assembly: String!, $name_prefix: [String!], $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, version: $version) {\n      name\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n"): (typeof documents)["\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query nearbyGenomicFeatures($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $a: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n\n    snpQuery(coordinates: $coordinates, assembly: $a, common: true) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query nearbyGenomicFeatures($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $a: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n\n    snpQuery(coordinates: $coordinates, assembly: $a, common: true) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query nearbyGenomicFeaturesNoSNPs($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n  }\n"): (typeof documents)["\n  query nearbyGenomicFeaturesNoSNPs($coordinates: [GenomicRangeInput!], $chromosome: String, $start: Int, $end: Int, $b: String!, $c: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $b, version: $version) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n\n    cCREQuery(assembly: $c, coordinates: $coordinates) {\n      accession\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      group\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tfpeaks_1($assembly: String, $range: [ChromosomeRangeInput]!, $target: String) {\n    peaks(assembly: $assembly, range: $range, target: $target) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n          files(types: \"replicated_peaks\") {\n            accession\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tfpeaks_1($assembly: String, $range: [ChromosomeRangeInput]!, $target: String) {\n    peaks(assembly: $assembly, range: $range, target: $target) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n          files(types: \"replicated_peaks\") {\n            accession\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tfpeaks_2($assembly: String, $range: [ChromosomeRangeInput]!, $species: String) {\n    peaks(assembly: $assembly, range: $range) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n        }\n      }\n    }\n    peakDataset(species: $species) {\n      partitionByTarget {\n        target {\n          name\n        }\n        counts {\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tfpeaks_2($assembly: String, $range: [ChromosomeRangeInput]!, $species: String) {\n    peaks(assembly: $assembly, range: $range) {\n      peaks {\n        chrom\n        chrom_start\n        chrom_end\n        dataset {\n          biosample\n          accession\n          target\n        }\n      }\n    }\n    peakDataset(species: $species) {\n      partitionByTarget {\n        target {\n          name\n        }\n        counts {\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query nearbyAndLinkedGenes(\n    $accessions: [String!]!\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      displayname\n    }\n  }\n"): (typeof documents)["\n  query nearbyAndLinkedGenes(\n    $accessions: [String!]!\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      displayname\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneQuery($assembly: String!, $name_prefix: [String!], $limit: Int, $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, limit: $limit, version: $version) {\n      name\n      id\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  } \n    "): (typeof documents)["\n  query geneQuery($assembly: String!, $name_prefix: [String!], $limit: Int, $version: Int) {\n    gene(assembly: $assembly, name_prefix: $name_prefix, limit: $limit, version: $version) {\n      name\n      id\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  } \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}"): (typeof documents)["\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRE_1($assembly: String!, $accession: [String!], $experiments: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query cCRE_1($assembly: String!, $accession: [String!], $experiments: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n"): (typeof documents)["\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cytobands($assembly: String!, $chromosome: String) {\n    cytoband(assembly: $assembly, chromosome: $chromosome) {\n      stain\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query cytobands($assembly: String!, $chromosome: String) {\n    cytoband(assembly: $assembly, chromosome: $chromosome) {\n      stain\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query biosamples_2 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n  }\n"): (typeof documents)["\n  query biosamples_2 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")        \n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        \n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query s_2($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query s_2($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query q_1($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n      }\n    }\n  }\n"): (typeof documents)["\n  query q_1($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query s_1($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query s_1($chromosome: String, $start: Int, $end: Int, $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version) {\n      name\n      strand\n      transcripts {\n        name\n        strand\n        exons {\n          coordinates {\n            chromosome\n            start\n            end\n          }\n        }\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query geneTSS($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n     strand\n     transcripts {\n      name\n      coordinates {\n        start\n        end\n      }      \n    }\n   }\n } "): (typeof documents)["\n query geneTSS($assembly: String!, $name: [String!], $limit: Int, $version: Int) {\n   gene(assembly: $assembly, name: $name, limit: $limit, version: $version) {\n     name\n     id\n     coordinates {\n       start\n       chromosome\n       end\n     }\n     strand\n     transcripts {\n      name\n      coordinates {\n        start\n        end\n      }      \n    }\n   }\n } "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getlistofLinkedGenesCelltypes {\n    linkedGenesCelltypes: getLinkedGenesCelltypes {\n      celltype\n      displayname\n      method\n    }\n  }\n"): (typeof documents)["\n  query getlistofLinkedGenesCelltypes {\n    linkedGenesCelltypes: getLinkedGenesCelltypes {\n      celltype\n      displayname\n      method\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGeneLocation1($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGeneLocation1($name: String!, $assembly: String!, $version: Int!) {\n    gene(name: [$name], assembly: $assembly, version: $version) {\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query snpAutocompleteQuery($snpid: String!, $assembly: String!) {\n      snpAutocompleteQuery(snpid: $snpid, assembly: $assembly) {\n          id\n          coordinates {\n              chromosome\n              start\n              end\n          }\n      }\n  }  \n"): (typeof documents)["\n  query snpAutocompleteQuery($snpid: String!, $assembly: String!) {\n      snpAutocompleteQuery(snpid: $snpid, assembly: $assembly) {\n          id\n          coordinates {\n              chromosome\n              start\n              end\n          }\n      }\n  }  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAcccessionCoords($accession: [String!], $assembly: String!) {\n    cCREQuery(accession: $accession, assembly: $assembly) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAcccessionCoords($accession: [String!], $assembly: String!) {\n    cCREQuery(accession: $accession, assembly: $assembly) {\n        accession\n      coordinates {\n        start\n        end\n        chromosome\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n"): (typeof documents)["\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query biosamples_3 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"): (typeof documents)["\n  query biosamples_3 {\n    human: ccREBiosampleQuery(assembly: \"grch38\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n    mouse: ccREBiosampleQuery(assembly: \"mm10\") {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;