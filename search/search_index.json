{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SCREEN GraphQL API The GraphQL API is the main way to programatically access SCREEN data and metadata. GraphQL If you're unfamiliar with GraphQL, there are a myriad of resources. The GraphQL site offers a detailed explanation of GraphQL and how it works. However, for a (relatively) simple, one-page introduction, this page is a good introduction. Getting started The host url for the API is https://factorbook.api.wenglab.org/graphql . Playground Navigating to the host url directly in the browser gives an interactive playground: The playground gives autocompleted suggestions for queries, documentation (on the right), tabs for multiple queries, a button to copy the current query as a cURL call, and a button to share the current queries. The documentation tab in the playground is very powerful. You can find information on any type or field. You can browse the required arguments for queries that need them. Programmatic Access In addition, the API can be accessed programatically. Many libraries exists for several languages in order to interface with GraphQL APIs. In this guide, we'll briefly cover only three common, simple cases: Command-line with cURL Python with requests Javascript with grapqhl-request What is this guide? This guide is intended to be a quick introduction to some of the various types of data available in the SCREEN API. There will be several example queries, as well as a quick exercise at the end of each section for interactivity. These may require you to search through the documentation using the playground. Composabiliy The API is designed in a fashion that data is composable. For example, you can query for nearby genes for a cCRE, and in the same request, also get the gene(s) expression and intersecting SNPs. However, in some cases, we may return an error if the respose would be too large or too performance-intenstive. In this case, you can split your query into parts.","title":"Home"},{"location":"#screen-graphql-api","text":"The GraphQL API is the main way to programatically access SCREEN data and metadata.","title":"SCREEN GraphQL API"},{"location":"#graphql","text":"If you're unfamiliar with GraphQL, there are a myriad of resources. The GraphQL site offers a detailed explanation of GraphQL and how it works. However, for a (relatively) simple, one-page introduction, this page is a good introduction.","title":"GraphQL"},{"location":"#getting-started","text":"The host url for the API is https://factorbook.api.wenglab.org/graphql .","title":"Getting started"},{"location":"#playground","text":"Navigating to the host url directly in the browser gives an interactive playground: The playground gives autocompleted suggestions for queries, documentation (on the right), tabs for multiple queries, a button to copy the current query as a cURL call, and a button to share the current queries. The documentation tab in the playground is very powerful. You can find information on any type or field. You can browse the required arguments for queries that need them.","title":"Playground"},{"location":"#programmatic-access","text":"In addition, the API can be accessed programatically. Many libraries exists for several languages in order to interface with GraphQL APIs. In this guide, we'll briefly cover only three common, simple cases: Command-line with cURL Python with requests Javascript with grapqhl-request","title":"Programmatic Access"},{"location":"#what-is-this-guide","text":"This guide is intended to be a quick introduction to some of the various types of data available in the SCREEN API. There will be several example queries, as well as a quick exercise at the end of each section for interactivity. These may require you to search through the documentation using the playground.","title":"What is this guide?"},{"location":"#composabiliy","text":"The API is designed in a fashion that data is composable. For example, you can query for nearby genes for a cCRE, and in the same request, also get the gene(s) expression and intersecting SNPs. However, in some cases, we may return an error if the respose would be too large or too performance-intenstive. In this case, you can split your query into parts.","title":"Composabiliy"},{"location":"getting_started/command_line/","text":"The SCREEN API takes a query as JSON in the body of a POST request and returns a JSON response. As mentioned before, the interactive playground allows copying the cURL command for a given query. However, here, we'll give a simple cURL command for reference. The following command curl 'https://factorbook.api.wenglab.org/graphql'\\ -H 'Content-Type: application/json'\\ -H 'Accept: application/json'\\ --data-binary '{\"query\":\"{ cCREQuery(accession: EH38E1516972, assembly: grch38) { coordinates { start end chromosome } rDHS assembly } }\"}' returns {\"data\":{\"cCREQuery\":{\"coordinates\":{ \"start\":5280547, \"end\": 5280897, \"chromosome\": \"chr1\"}}}} This response can be saved to as a JSON file. Additionally, it could be piped into a JSON processing library (like jq ) to be processed.","title":"Command-line"},{"location":"getting_started/javascript/","text":"Building on the previous two examples, this example in Javascript uses the graphql-request library to completely abstract over the underlying POST request. import { request } from 'graphql-request' const query = `query cCREQuery($accession: [String!], $assembly: String!) { cCREQuery(accession: $accession, assembly: $assembly) { coordinates { start end chromosome } rDHS assembly zScores { score experiment rDHS } } }` const variables = { accession: [\"EH38E1516972\"], assembly: \"grch38\" } request('https://factorbook.api.wenglab.org/graphql', query).then(data => ) which prints { \"data\": { \"cCREQuery\": [ { \"coordinates\": { \"start\": 5280547, \"end\": 5280897, \"chromosome\": \"chr11\" }, \"rDHS\": \"EH38D2417606\", \"assembly\": \"grch38\" } ] } }","title":"Javascript"},{"location":"getting_started/python/","text":"Similar to the command-like query, this example will also uses a plain POST request. However, in addition, this example uses the requests library in python to provide a thin abstraction. It also shows how to include GraphQL variables. import requests variables = { \"accession\": [\"EH38E1516972\"], \"assembly\": \"grch38\" } query = \"\"\" query cCREQuery($accession: [String!], $assembly: String!) { cCREQuery(accession: $accession, assembly: $assembly) { coordinates { start end chromosome } rDHS assembly } } \"\"\" request = requests.post( 'https://factorbook.api.wenglab.org/graphql', json={ 'query': query, 'variables': variables }, headers={} ) if request.status_code != 200: raise Exception(\"Query failed. Status code: {}.\".format(request.status_code)) result = request.json() print(result) where the result is { u'data': { u'cCREQuery': { u'coordinates': { u'start': 5280547, u'end': 5280897, u'chromosome': u'chr11' }, u'rDHS': u'EH38D2417606', u'assembly': u'grch38' } } }","title":"Python"},{"location":"queries/ccredetails/","text":"Getting cCRE details Query a max Z scores of a cCRE Returns a cell type agnostic max Z scores of a cCRE query { cCREQuery(assembly: \"grch38\", accession: \"EH38E2941922\") { accession group dnase: maxZ(assay: \"DNase\") h3k4me3: maxZ(assay: \"H3K4me3\") h3k27ac: maxZ(assay: \"H3K27ac\") ctcf: maxZ(assay: \"CTCF\") atac: maxZ(assay: \"ATAC\") } } Get biosample-specific epigenetic signals Returns all biosample-specific signals for a given cCRE. query { ccREBiosampleQuery(assembly: \"grch38\") { biosamples { sampleType cCREZScores(accession: \"EH38E2941922\") { score assay experiment_accession } name ontology } } } Get nearby genomic features Returns nearby genomic features (genes, cCRES and SNPs) for a single cCRE (based on genomic region). query { gene(chromosome: \"chr11\", start: 4291251, end: 6291587, assembly: \"grch38\") { name id strand coordinates { chromosome start end } transcripts { id coordinates { chromosome start end } } } cCREQuery(assembly: \"grch38\", coordinates: { chromosome:\"chr11\", start:4291251,end:6291587 }) { accession coordinates { chromosome start end } group } snpQuery(coordinates: { chromosome:\"chr11\", start:4291251, end:6291587 }, assembly: \"hg38\", common: true) { id coordinates { chromosome start end } } } Get orthologous cCREs in another assembly Returns orthogolous cCREs in mm10 for a given grch38 cCRE or vice versa. query { orthologQuery(accession: \"EH38E2941922\", assembly: \"grch38\") { assembly accession ortholog { stop start chromosome accession } } } Get linked genes Returns linked genes for a cCRE by various methods like Intact-HiC, CRISPR, eQTLs, RNAPII-ChIAPET and CTCF-ChIAPET. query { linkedGenesQuery(assembly: \"grch38\", accession: [\"EH38E1516972\"]) { accession p_val gene geneid genetype method grnaid effectsize assay celltype experiment_accession tissue variantid source slope score displayname } } Get ENTEx data for given cCRE Returns ENTEx data for input accession query { entexQuery(accession: \"EH38E1310345\"){ assay accession hap1_count hap2_count hap1_allele_ratio p_betabinom experiment_accession tissue donor imbalance_significance } } Get ENTEx Active Annotations for given cCRE genomic region Returns ENTEx active tissues and supoorting assays for input accession genomic coordinates query { entexActiveAnnotationsQuery(coordinates: { chromosome: \"chr1\", start: 1000068, end: 1000409 }) { tissue assay_score } } Try it out What query would you use to get the max H3K27ac Z-score for nearby cCREs for EH38E2941922 ? See answer query { cCREQuery(assembly: \"GRCh38\", accession: \"EH38E2941922\") { accession group h3k27ac: maxZ(assay: \"H3K27ac\") } }","title":"cCRE details"},{"location":"queries/ccredetails/#getting-ccre-details","text":"","title":"Getting cCRE details"},{"location":"queries/ccredetails/#query-a-max-z-scores-of-a-ccre","text":"Returns a cell type agnostic max Z scores of a cCRE query { cCREQuery(assembly: \"grch38\", accession: \"EH38E2941922\") { accession group dnase: maxZ(assay: \"DNase\") h3k4me3: maxZ(assay: \"H3K4me3\") h3k27ac: maxZ(assay: \"H3K27ac\") ctcf: maxZ(assay: \"CTCF\") atac: maxZ(assay: \"ATAC\") } }","title":"Query a max Z scores of a cCRE"},{"location":"queries/ccredetails/#get-biosample-specific-epigenetic-signals","text":"Returns all biosample-specific signals for a given cCRE. query { ccREBiosampleQuery(assembly: \"grch38\") { biosamples { sampleType cCREZScores(accession: \"EH38E2941922\") { score assay experiment_accession } name ontology } } }","title":"Get biosample-specific epigenetic signals"},{"location":"queries/ccredetails/#get-nearby-genomic-features","text":"Returns nearby genomic features (genes, cCRES and SNPs) for a single cCRE (based on genomic region). query { gene(chromosome: \"chr11\", start: 4291251, end: 6291587, assembly: \"grch38\") { name id strand coordinates { chromosome start end } transcripts { id coordinates { chromosome start end } } } cCREQuery(assembly: \"grch38\", coordinates: { chromosome:\"chr11\", start:4291251,end:6291587 }) { accession coordinates { chromosome start end } group } snpQuery(coordinates: { chromosome:\"chr11\", start:4291251, end:6291587 }, assembly: \"hg38\", common: true) { id coordinates { chromosome start end } } }","title":"Get nearby genomic features"},{"location":"queries/ccredetails/#get-orthologous-ccres-in-another-assembly","text":"Returns orthogolous cCREs in mm10 for a given grch38 cCRE or vice versa. query { orthologQuery(accession: \"EH38E2941922\", assembly: \"grch38\") { assembly accession ortholog { stop start chromosome accession } } }","title":"Get orthologous cCREs in another assembly"},{"location":"queries/ccredetails/#get-linked-genes","text":"Returns linked genes for a cCRE by various methods like Intact-HiC, CRISPR, eQTLs, RNAPII-ChIAPET and CTCF-ChIAPET. query { linkedGenesQuery(assembly: \"grch38\", accession: [\"EH38E1516972\"]) { accession p_val gene geneid genetype method grnaid effectsize assay celltype experiment_accession tissue variantid source slope score displayname } }","title":"Get linked genes"},{"location":"queries/ccredetails/#get-entex-data-for-given-ccre","text":"Returns ENTEx data for input accession query { entexQuery(accession: \"EH38E1310345\"){ assay accession hap1_count hap2_count hap1_allele_ratio p_betabinom experiment_accession tissue donor imbalance_significance } }","title":"Get ENTEx data for given cCRE"},{"location":"queries/ccredetails/#get-entex-active-annotations-for-given-ccre-genomic-region","text":"Returns ENTEx active tissues and supoorting assays for input accession genomic coordinates query { entexActiveAnnotationsQuery(coordinates: { chromosome: \"chr1\", start: 1000068, end: 1000409 }) { tissue assay_score } }","title":"Get ENTEx Active Annotations for given cCRE genomic region"},{"location":"queries/ccredetails/#try-it-out","text":"What query would you use to get the max H3K27ac Z-score for nearby cCREs for EH38E2941922 ? See answer query { cCREQuery(assembly: \"GRCh38\", accession: \"EH38E2941922\") { accession group h3k27ac: maxZ(assay: \"H3K27ac\") } }","title":"Try it out"},{"location":"queries/ccres/","text":"Searching cCREs Query cCREs by genomic region Returns the cCREs in the given range, their location, and their group, zscores. query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}] ) { chrom start len pct ctcf_zscore dnase_zscore atac_zscore enhancer_zscore promoter_zscore } } Query cCREs by max epigenetic signal Searches for cCREs with CTCF zscore between 1 and 2. query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}], rank_ctcf_end: 2 rank_ctcf_start: 1 ) { chrom start len pct ctcf_zscore dnase_zscore atac_zscore enhancer_zscore promoter_zscore } } Query cCREs by biosample-specific epigenetic signal Returns cCREs active in GM12878 query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}], cellType: \"GM12878_ENCDO000AAK\" ) { chrom start len pct ctspecific { ct ctcf_zscore dnase_zscore h3k4me3_zscore h3k27ac_zscore atac_zscore } } } Query cCREs by accession Returns multiple cCREs by accession. query { cCRESCREENSearch( assembly: \"grch38\" accessions: [\"EH38E1516972\",\"EH38E2941920\"] ) { chrom start len pct ctcf_zscore dnase_zscore enhancer_zscore promoter_zscore atac_zscore } } Get Near by genes from given cCREs Returns 3 near by genes for a cCRE by distance. query { cCRESCREENSearch( assembly: \"grch38\",accessions: [\"EH38E1832141\",\"EH38E3340051\"] ) { chrom start len pct info { accession } nearestgenes { gene distance } } } Get Biosample Metadata for given assembly Returns biosample metadata including short display name, value, ontology, life stage, sample type along with file and experiment accessions for corresponding assays for a given assembly (grch38 or mm10) query { ccREBiosampleQuery(assembly: \"grch38\") { biosamples { name ontology lifeStage sampleType displayname dnase: experimentAccession(assay: \"DNase\") h3k4me3: experimentAccession(assay: \"H3K4me3\") h3k27ac: experimentAccession(assay: \"H3K27ac\") ctcf: experimentAccession(assay: \"CTCF\") atac: experimentAccession(assay: \"ATAC\") dnase_signal: fileAccession(assay: \"DNase\") h3k4me3_signal: fileAccession(assay: \"H3K4me3\") h3k27ac_signal: fileAccession(assay: \"H3K27ac\") ctcf_signal: fileAccession(assay: \"CTCF\") atac_signal: fileAccession(assay: \"ATAC\") } } }","title":"Searching cCREs"},{"location":"queries/ccres/#searching-ccres","text":"","title":"Searching cCREs"},{"location":"queries/ccres/#query-ccres-by-genomic-region","text":"Returns the cCREs in the given range, their location, and their group, zscores. query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}] ) { chrom start len pct ctcf_zscore dnase_zscore atac_zscore enhancer_zscore promoter_zscore } }","title":"Query cCREs by genomic region"},{"location":"queries/ccres/#query-ccres-by-max-epigenetic-signal","text":"Searches for cCREs with CTCF zscore between 1 and 2. query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}], rank_ctcf_end: 2 rank_ctcf_start: 1 ) { chrom start len pct ctcf_zscore dnase_zscore atac_zscore enhancer_zscore promoter_zscore } }","title":"Query cCREs by max epigenetic signal"},{"location":"queries/ccres/#query-ccres-by-biosample-specific-epigenetic-signal","text":"Returns cCREs active in GM12878 query { cCRESCREENSearch( assembly: \"grch38\" coordinates: [{ chromosome: \"chr11\", start: 5205263, end: 5207263},{ chromosome: \"chr1\", start: 1205223, end: 1209243}], cellType: \"GM12878_ENCDO000AAK\" ) { chrom start len pct ctspecific { ct ctcf_zscore dnase_zscore h3k4me3_zscore h3k27ac_zscore atac_zscore } } }","title":"Query cCREs by biosample-specific epigenetic signal"},{"location":"queries/ccres/#query-ccres-by-accession","text":"Returns multiple cCREs by accession. query { cCRESCREENSearch( assembly: \"grch38\" accessions: [\"EH38E1516972\",\"EH38E2941920\"] ) { chrom start len pct ctcf_zscore dnase_zscore enhancer_zscore promoter_zscore atac_zscore } }","title":"Query cCREs by accession"},{"location":"queries/ccres/#get-near-by-genes-from-given-ccres","text":"Returns 3 near by genes for a cCRE by distance. query { cCRESCREENSearch( assembly: \"grch38\",accessions: [\"EH38E1832141\",\"EH38E3340051\"] ) { chrom start len pct info { accession } nearestgenes { gene distance } } }","title":"Get Near by genes from given cCREs"},{"location":"queries/ccres/#get-biosample-metadata-for-given-assembly","text":"Returns biosample metadata including short display name, value, ontology, life stage, sample type along with file and experiment accessions for corresponding assays for a given assembly (grch38 or mm10) query { ccREBiosampleQuery(assembly: \"grch38\") { biosamples { name ontology lifeStage sampleType displayname dnase: experimentAccession(assay: \"DNase\") h3k4me3: experimentAccession(assay: \"H3K4me3\") h3k27ac: experimentAccession(assay: \"H3K27ac\") ctcf: experimentAccession(assay: \"CTCF\") atac: experimentAccession(assay: \"ATAC\") dnase_signal: fileAccession(assay: \"DNase\") h3k4me3_signal: fileAccession(assay: \"H3K4me3\") h3k27ac_signal: fileAccession(assay: \"H3K27ac\") ctcf_signal: fileAccession(assay: \"CTCF\") atac_signal: fileAccession(assay: \"ATAC\") } } }","title":"Get Biosample Metadata for given assembly"},{"location":"queries/functionalcharacterizationdata/","text":"Getting Functional Characterization Details Query VISTA enhancer regions Returns VISTA enhancer regions with tissues,result and element id query { functionalCharacterizationQuery(assembly: \"grch38\", coordinates: { chromosome: \"chr11\", start: 5291251, end: 5291587 }) { tissues element_id assay_result chromosome stop start } } Get MPRA Regions Returns MPRA regions for given genomic region. query { mpraFccQuery(coordinates: { chromosome: \"chr11\", start: 5291251, end: 5291587 }) { celltype chromosome stop start assay_type element_location series strand log2fc experiment barcode_location } } Get STARR-seq CAPRA Quantification (solo and double fragments) Returns STARR-seq CAPRA Quantification (solo fragments) for a single cCRE. query { capraFccSoloQuery(accession: [\"EH38E2941922\"]) { rdhs log2fc fdr dna_rep1 rna_rep1 rna_rep2 rna_rep3 pvalue experiment } } Returns STARR-seq CAPRA Quantification (double fragments) for a single cCRE. query { capraFccDoubleQuery(accession: [\"EH38E2941922\"]) { rdhs_p1 rdhs_p2 log2fc fdr dna_rep1 rna_rep1 rna_rep2 rna_rep3 pvalue experiment } }","title":"Getting Functional Characterization Details"},{"location":"queries/functionalcharacterizationdata/#getting-functional-characterization-details","text":"","title":"Getting Functional Characterization Details"},{"location":"queries/functionalcharacterizationdata/#query-vista-enhancer-regions","text":"Returns VISTA enhancer regions with tissues,result and element id query { functionalCharacterizationQuery(assembly: \"grch38\", coordinates: { chromosome: \"chr11\", start: 5291251, end: 5291587 }) { tissues element_id assay_result chromosome stop start } }","title":"Query VISTA enhancer regions"},{"location":"queries/functionalcharacterizationdata/#get-mpra-regions","text":"Returns MPRA regions for given genomic region. query { mpraFccQuery(coordinates: { chromosome: \"chr11\", start: 5291251, end: 5291587 }) { celltype chromosome stop start assay_type element_location series strand log2fc experiment barcode_location } }","title":"Get MPRA Regions"},{"location":"queries/functionalcharacterizationdata/#get-starr-seq-capra-quantification-solo-and-double-fragments","text":"Returns STARR-seq CAPRA Quantification (solo fragments) for a single cCRE. query { capraFccSoloQuery(accession: [\"EH38E2941922\"]) { rdhs log2fc fdr dna_rep1 rna_rep1 rna_rep2 rna_rep3 pvalue experiment } } Returns STARR-seq CAPRA Quantification (double fragments) for a single cCRE. query { capraFccDoubleQuery(accession: [\"EH38E2941922\"]) { rdhs_p1 rdhs_p2 log2fc fdr dna_rep1 rna_rep1 rna_rep2 rna_rep3 pvalue experiment } }","title":"Get STARR-seq CAPRA Quantification (solo and double fragments)"},{"location":"queries/geneexpression/","text":"Getting gene expression data Get gene expression for all biosamples for a given gene Returns gene id data for the OR51B4 gene. query { gene(assembly: \"grch38\", name: [\"OR51B4\"]) { name id coordinates { start chromosome end } } } Returns gene expression data for the OR51B4 gene (based on gene id). query { gene_dataset { biosample tissue cell_compartment biosample_type assay_term_name accession gene_quantification_files(assembly: \"GRCh38\") { accession quantifications(gene_id_prefix: \"ENSG00000183251\") { tpm file_accession } } } }","title":"Gene expression"},{"location":"queries/geneexpression/#getting-gene-expression-data","text":"","title":"Getting gene expression data"},{"location":"queries/geneexpression/#get-gene-expression-for-all-biosamples-for-a-given-gene","text":"Returns gene id data for the OR51B4 gene. query { gene(assembly: \"grch38\", name: [\"OR51B4\"]) { name id coordinates { start chromosome end } } } Returns gene expression data for the OR51B4 gene (based on gene id). query { gene_dataset { biosample tissue cell_compartment biosample_type assay_term_name accession gene_quantification_files(assembly: \"GRCh38\") { accession quantifications(gene_id_prefix: \"ENSG00000183251\") { tpm file_accession } } } }","title":"Get gene expression for all biosamples for a given gene"},{"location":"queries/gwas/","text":"Fetching genome-wide association Studies data Query genome-wide association studies Returns all GWAS studies along with author, pubmedid query getAllGWASStudies { getAllGwasStudies { study totalldblocks author pubmedid studyname } } Query SNPs for given genome-wide association study Returns SNPs, genomic regions, rsquare value for given study query { getSNPsforGWASStudies(study: \"Ahola-Olli_AV-27989323-Eotaxin_levels\") { snpid ldblock rsquare chromosome stop start ldblocksnpid } } Query GWAS celltype enrichment data Returns celltype enrichment data for given study value query { getGWASCtEnrichmentQuery(study: \"Ahola-Olli_AV-27989323-Eotaxin_levels\") { celltype accession fc fdr pvalue } }","title":"GWAS"},{"location":"queries/gwas/#fetching-genome-wide-association-studies-data","text":"","title":"Fetching genome-wide association Studies data"},{"location":"queries/gwas/#query-genome-wide-association-studies","text":"Returns all GWAS studies along with author, pubmedid query getAllGWASStudies { getAllGwasStudies { study totalldblocks author pubmedid studyname } }","title":"Query genome-wide association studies"},{"location":"queries/gwas/#query-snps-for-given-genome-wide-association-study","text":"Returns SNPs, genomic regions, rsquare value for given study query { getSNPsforGWASStudies(study: \"Ahola-Olli_AV-27989323-Eotaxin_levels\") { snpid ldblock rsquare chromosome stop start ldblocksnpid } }","title":"Query SNPs for given genome-wide association study"},{"location":"queries/gwas/#query-gwas-celltype-enrichment-data","text":"Returns celltype enrichment data for given study value query { getGWASCtEnrichmentQuery(study: \"Ahola-Olli_AV-27989323-Eotaxin_levels\") { celltype accession fc fdr pvalue } }","title":"Query GWAS celltype enrichment data"},{"location":"queries/rampage/","text":"Get RAMPAGE data Get RAMPAGE data for a given gene NOTE: RAMPAGE data is only available for GRCh38 Returns RAMPAGE data for the OR51B4 gene. query { tssrampageQuery(genename: \"OR51B4\" ) { start geneName organ locusType strand peakId biosampleName biosampleType biosampleSummary expAccession value start end chrom } }","title":"Rampage"},{"location":"queries/rampage/#get-rampage-data","text":"","title":"Get RAMPAGE data"},{"location":"queries/rampage/#get-rampage-data-for-a-given-gene","text":"NOTE: RAMPAGE data is only available for GRCh38 Returns RAMPAGE data for the OR51B4 gene. query { tssrampageQuery(genename: \"OR51B4\" ) { start geneName organ locusType strand peakId biosampleName biosampleType biosampleSummary expAccession value start end chrom } }","title":"Get RAMPAGE data for a given gene"},{"location":"queries/searchautocomplete/","text":"Getting data required to autcomplete gene,snp,ccre search NOTE: Due to performance limitations, its recommended to use limit input parameter with these autocomplete queries Query matching genes starting with give name prefix Returns gene names matching given name prefix along with genomic region. query { gene(assembly: \"grch38\", name_prefix: \"so\", limit: 1000) { name id coordinates { start chromosome end } } } Query matching cCRE accessions starting with give name prefix Returns cCRE accessions matching given name prefix along with genomic region. query { cCREQuery(accession_prefix: \"EH38E\", assembly: \"GRCh38\", limit: 1000) { accession coordinates { start end chromosome } } } Query matching SNP ids starting with give name prefix Returns SNP ids matching given name prefix along with genomic region. query { snpAutocompleteQuery(snpid: \"rs78\", assembly: \"grch38\") { id coordinates { chromosome start end } } }","title":"Suggest cCRE, genes and SNPs on search"},{"location":"queries/searchautocomplete/#getting-data-required-to-autcomplete-genesnpccre-search","text":"NOTE: Due to performance limitations, its recommended to use limit input parameter with these autocomplete queries","title":"Getting data required to autcomplete gene,snp,ccre search"},{"location":"queries/searchautocomplete/#query-matching-genes-starting-with-give-name-prefix","text":"Returns gene names matching given name prefix along with genomic region. query { gene(assembly: \"grch38\", name_prefix: \"so\", limit: 1000) { name id coordinates { start chromosome end } } }","title":"Query matching genes starting with give name prefix"},{"location":"queries/searchautocomplete/#query-matching-ccre-accessions-starting-with-give-name-prefix","text":"Returns cCRE accessions matching given name prefix along with genomic region. query { cCREQuery(accession_prefix: \"EH38E\", assembly: \"GRCh38\", limit: 1000) { accession coordinates { start end chromosome } } }","title":"Query matching cCRE accessions starting with give name prefix"},{"location":"queries/searchautocomplete/#query-matching-snp-ids-starting-with-give-name-prefix","text":"Returns SNP ids matching given name prefix along with genomic region. query { snpAutocompleteQuery(snpid: \"rs78\", assembly: \"grch38\") { id coordinates { chromosome start end } } }","title":"Query matching SNP ids starting with give name prefix"}]}